input CreateGameInput {
  ball: String
  status: String
  clientMutationId: String
}

type CreateGamePayload {
  game: Game
  clientMutationId: String
}

type Game implements Node {
  """The ID of an object"""
  id: ID!
  ball: String
  status: String
  Goals: [Goal]
  createdAt: String!
  updatedAt: String!
}

"""A connection to a list of items."""
type GameConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GameEdge]
  totalCount: Int!
}

"""An edge in a connection."""
type GameEdge {
  """The item at the end of the edge"""
  node: Game

  """A cursor for use in pagination"""
  cursor: String!
}

type Goal implements Node {
  """The ID of an object"""
  id: ID!
  ownGoal: Boolean
  Game: Game!
  createdAt: String!
  updatedAt: String!
}

"""A connection to a list of items."""
type GoalConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GoalEdge]
  totalCount: Int!
}

"""An edge in a connection."""
type GoalEdge {
  """The item at the end of the edge"""
  node: Goal

  """A cursor for use in pagination"""
  cursor: String!
}

type Mutation {
  createGame(input: CreateGameInput!): CreateGamePayload
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Fetches objects given their IDs"""
  nodes(
    """The IDs of objects"""
    ids: [ID!]!
  ): [Node]!
  games(after: String, first: Int): GameConnection
  goals(after: String, first: Int): GoalConnection
  users(after: String, first: Int): UserConnection
}

type User implements Node {
  """The ID of an object"""
  id: ID!
  name: String
  photoUrl: String
  email: String
  token: String
  Games: Game!
  createdAt: String!
  updatedAt: String!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]
  totalCount: Int!
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge"""
  node: User

  """A cursor for use in pagination"""
  cursor: String!
}
